策略模式总结：
	1、策略模式的定义:
		策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互替换，
		策略模式让算法独立于使用它的客户而独立变化。策略模式使这些算法在客户端调用它们的时候能够互不影响地变化。
	2、策略模式的意义:
		策略模式使开发人员能够开发出由许多可替换的部分组成的软件，并且各个部分之间是低耦合的关系。
		 低耦合的特性使软件具有更强的可扩展性，易于维护；更重要的是，它大大提高了软件的可重用性。
	3、策略模式中有三个对象：
      	环境对象(Context)：该类中实现了对抽象策略中定义的接口或者抽象类的引用。
      	抽象策略对象(Strategy)：它可由接口或抽象类来实现。
      	具体策略对象(ConcreteStrategy)：它封装了实现同不功能的不同算法。
    4、 策略模式的实现：
		1.对策略对象定义一个公共接口。
		2.编写策略类，该类实现了上面的公共接口。
		3.在使用策略对象的类中保存一个对策略对象的引用。
		4.在使用策略对象的类中，实现对策略对象的set和get方法或者使用构造方法完成赋值。
	5、策略模式的缺点：
		1、客户端必须知道所有的策略类，并自行决定使用哪一个策略类。
			这就意味着客户端必须理解这些算法的区别，以便适时选择恰当的算法类。
 			换言之，策略模式  只适用于  客户端知道  所有的算法或行为的情况。
		2、策略模式造成很多的策略类，每个具体策略类都会产生一个新类。
			有时候可以通过把依赖于环境的状态保存到客户端里面，而将策略类设计成可共享的，
			这样策略类实例可以  被不同  客户端  使用。
	换言之，可以使用  享元模式 来减少对象的数量。